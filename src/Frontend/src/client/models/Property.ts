/* tslint:disable */
/* eslint-disable */
/**
 * QueryApi, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    DataChannelType,
    DataChannelTypeFromJSON,
    DataChannelTypeFromJSONTyped,
    DataChannelTypeToJSON,
} from './DataChannelType';
import {
    Format,
    FormatFromJSON,
    FormatFromJSONTyped,
    FormatToJSON,
} from './Format';
import {
    Range,
    RangeFromJSON,
    RangeFromJSONTyped,
    RangeToJSON,
} from './Range';
import {
    Unit,
    UnitFromJSON,
    UnitFromJSONTyped,
    UnitToJSON,
} from './Unit';

/**
 * 
 * @export
 * @interface Property
 */
export interface Property {
    [key: string]: any | any;
    /**
     * 
     * @type {DataChannelType}
     * @memberof Property
     */
    dataChannelType?: DataChannelType;
    /**
     * 
     * @type {Format}
     * @memberof Property
     */
    format?: Format;
    /**
     * 
     * @type {Range}
     * @memberof Property
     */
    range?: Range;
    /**
     * 
     * @type {Unit}
     * @memberof Property
     */
    unit?: Unit;
    /**
     * 
     * @type {string}
     * @memberof Property
     */
    qualityCoding?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Property
     */
    alertPriority?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Property
     */
    name?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Property
     */
    remarks?: string | null;
}

export function PropertyFromJSON(json: any): Property {
    return PropertyFromJSONTyped(json, false);
}

export function PropertyFromJSONTyped(json: any, ignoreDiscriminator: boolean): Property {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
            ...json,
        'dataChannelType': !exists(json, 'DataChannelType') ? undefined : DataChannelTypeFromJSON(json['DataChannelType']),
        'format': !exists(json, 'Format') ? undefined : FormatFromJSON(json['Format']),
        'range': !exists(json, 'Range') ? undefined : RangeFromJSON(json['Range']),
        'unit': !exists(json, 'Unit') ? undefined : UnitFromJSON(json['Unit']),
        'qualityCoding': !exists(json, 'QualityCoding') ? undefined : json['QualityCoding'],
        'alertPriority': !exists(json, 'AlertPriority') ? undefined : json['AlertPriority'],
        'name': !exists(json, 'Name') ? undefined : json['Name'],
        'remarks': !exists(json, 'Remarks') ? undefined : json['Remarks'],
    };
}

export function PropertyToJSON(value?: Property | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
            ...value,
        'DataChannelType': DataChannelTypeToJSON(value.dataChannelType),
        'Format': FormatToJSON(value.format),
        'Range': RangeToJSON(value.range),
        'Unit': UnitToJSON(value.unit),
        'QualityCoding': value.qualityCoding,
        'AlertPriority': value.alertPriority,
        'Name': value.name,
        'Remarks': value.remarks,
    };
}

