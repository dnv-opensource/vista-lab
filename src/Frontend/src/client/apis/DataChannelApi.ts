/* tslint:disable */
/* eslint-disable */
/**
 * QueryApi, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    DataChannelFilter,
    DataChannelFilterFromJSON,
    DataChannelFilterToJSON,
    DataChannelListPackage,
    DataChannelListPackageFromJSON,
    DataChannelListPackageToJSON,
    EventDataSet,
    EventDataSetFromJSON,
    EventDataSetToJSON,
    PointFeaturePropsFeature,
    PointFeaturePropsFeatureFromJSON,
    PointFeaturePropsFeatureToJSON,
    TimeSeriesDataWithProps,
    TimeSeriesDataWithPropsFromJSON,
    TimeSeriesDataWithPropsToJSON,
    TimeSeriesRequestDto,
    TimeSeriesRequestDtoFromJSON,
    TimeSeriesRequestDtoToJSON,
} from '../models';

export interface DataChannelGetRequest {
    id: string;
}

export interface DataChannelGetDataChannelByFilterRequest {
    dataChannelFilter?: DataChannelFilter;
}

export interface DataChannelGetLatestTimeSeriesValueRequest {
    timeSeriesRequestDto?: TimeSeriesRequestDto;
}

export interface DataChannelPostSearchByFilterRequest {
    dataChannelFilter?: DataChannelFilter;
}

/**
 * 
 */
export class DataChannelApi extends runtime.BaseAPI {

    /**
     * Search for time series given a data channel internalId
     */
    async dataChannelGetRaw(requestParameters: DataChannelGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<EventDataSet>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling dataChannelGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/data-channel/{id}/time-series`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EventDataSetFromJSON));
    }

    /**
     * Search for time series given a data channel internalId
     */
    async dataChannelGet(requestParameters: DataChannelGetRequest, initOverrides?: RequestInit): Promise<Array<EventDataSet>> {
        const response = await this.dataChannelGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search for data channels based in the given filters
     */
    async dataChannelGetDataChannelByFilterRaw(requestParameters: DataChannelGetDataChannelByFilterRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<DataChannelListPackage>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/data-channel`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DataChannelFilterToJSON(requestParameters.dataChannelFilter),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DataChannelListPackageFromJSON));
    }

    /**
     * Search for data channels based in the given filters
     */
    async dataChannelGetDataChannelByFilter(requestParameters: DataChannelGetDataChannelByFilterRequest = {}, initOverrides?: RequestInit): Promise<Array<DataChannelListPackage>> {
        const response = await this.dataChannelGetDataChannelByFilterRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search for time series given a data channel internalId
     */
    async dataChannelGetLatestTimeSeriesValueRaw(requestParameters: DataChannelGetLatestTimeSeriesValueRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<TimeSeriesDataWithProps>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/data-channel/time-series/latest`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TimeSeriesRequestDtoToJSON(requestParameters.timeSeriesRequestDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TimeSeriesDataWithPropsFromJSON(jsonValue));
    }

    /**
     * Search for time series given a data channel internalId
     */
    async dataChannelGetLatestTimeSeriesValue(requestParameters: DataChannelGetLatestTimeSeriesValueRequest = {}, initOverrides?: RequestInit): Promise<TimeSeriesDataWithProps> {
        const response = await this.dataChannelGetLatestTimeSeriesValueRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search for time series given a data channel internalId
     */
    async dataChannelGetVesselPositionsRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<PointFeaturePropsFeature>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/data-channel/time-series/position/latest`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PointFeaturePropsFeatureFromJSON));
    }

    /**
     * Search for time series given a data channel internalId
     */
    async dataChannelGetVesselPositions(initOverrides?: RequestInit): Promise<Array<PointFeaturePropsFeature>> {
        const response = await this.dataChannelGetVesselPositionsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Search for time series given a data channel internalId
     */
    async dataChannelPostSearchByFilterRaw(requestParameters: DataChannelPostSearchByFilterRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<EventDataSet>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/data-channel/time-series`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DataChannelFilterToJSON(requestParameters.dataChannelFilter),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EventDataSetFromJSON));
    }

    /**
     * Search for time series given a data channel internalId
     */
    async dataChannelPostSearchByFilter(requestParameters: DataChannelPostSearchByFilterRequest = {}, initOverrides?: RequestInit): Promise<Array<EventDataSet>> {
        const response = await this.dataChannelPostSearchByFilterRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
