/* tslint:disable */
/* eslint-disable */
/**
 * QueryApi, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    DataChannelListPackage,
    DataChannelListPackageFromJSON,
    DataChannelListPackageToJSON,
    SearchRequestDto,
    SearchRequestDtoFromJSON,
    SearchRequestDtoToJSON,
    VisVersion,
    VisVersionFromJSON,
    VisVersionToJSON,
} from '../models';

export interface SearchSearchRequest {
    visVersion: VisVersion;
    searchRequestDto?: SearchRequestDto;
}

/**
 * 
 */
export class SearchApi extends runtime.BaseAPI {

    /**
     * Search for gmod paths.
     */
    async searchSearchRaw(requestParameters: SearchSearchRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<DataChannelListPackage>>> {
        if (requestParameters.visVersion === null || requestParameters.visVersion === undefined) {
            throw new runtime.RequiredError('visVersion','Required parameter requestParameters.visVersion was null or undefined when calling searchSearch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/search/{visVersion}`.replace(`{${"visVersion"}}`, encodeURIComponent(String(requestParameters.visVersion))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchRequestDtoToJSON(requestParameters.searchRequestDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DataChannelListPackageFromJSON));
    }

    /**
     * Search for gmod paths.
     */
    async searchSearch(requestParameters: SearchSearchRequest, initOverrides?: RequestInit): Promise<Array<DataChannelListPackage>> {
        const response = await this.searchSearchRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
